/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ltnc.quanlykho.View;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.ltnc.quanlykho.Controllers.CustomerController;
import com.ltnc.quanlykho.Controllers.Global;
import com.ltnc.quanlykho.Controllers.GoodController;
import com.ltnc.quanlykho.Controllers.SellRecordController;
import com.ltnc.quanlykho.Models.Customer;
import com.ltnc.quanlykho.Models.Good;
import com.ltnc.quanlykho.Models.SellRecord;


/**
 *
 * @author HM
 */
public class QLHoaDon extends javax.swing.JFrame {

    /**
     * Creates new form QLHoaDon
     */
    private List<Customer> customer_list = new ArrayList<Customer>();
    private List<Good> good_list = new ArrayList<Good>();
    private List<Good> good_buy_list = new ArrayList<Good>();
    private List<SellRecord> sellrecord_list = new ArrayList<SellRecord>();

    private Customer selected_customer = new Customer();
    private Good selected_good = new Good();
    private Good selected_buy_good = new Good();
    private SellRecord selected_sellrecord = new SellRecord();

    private CustomerController customer_controller = new CustomerController();
    private GoodController good_controller = new GoodController();
    private SellRecordController sellrecord_controller = new SellRecordController();
    private DefaultTableModel modelHD;  //Tạo model cho JTable
    private DefaultTableModel modelSP;
    private DefaultTableModel modelGH;
    private DefaultTableModel modelKH;
    private DefaultTableModel modelHDSP;

    int indexSP;
    int indexKH;
    int indexGH;
    int indexHD;

    public QLHoaDon() {
      initComponents();
      this.setLocationRelativeTo(null);
      modelHD = (DefaultTableModel) TableHoadon.getModel();
      modelSP = (DefaultTableModel) TableSP.getModel();
      modelGH = (DefaultTableModel) TableGH.getModel();
      modelKH = (DefaultTableModel) TableKH.getModel();
      modelHDSP = (DefaultTableModel) TableHDSP.getModel();
      reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableSP = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableGH = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableHoadon = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        btnAddHd = new javax.swing.JButton();
        btnAddSp = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnDeleteSPCT = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableKH = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableHDSP = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("QUẢN LÝ ĐƠN HÀNG");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Tên khách hàng:");

        jLabel3.setText("Số điện thoại:");

        jLabel13.setText("Địa chỉ");

        jButton2.setText("Thêm khách hàng");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(89, 89, 89)
                        .addComponent(jTextField2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(17, 17, 17))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jLabel13)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        TableSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Giá/1 sản phẩm"
            }
        ));
        TableSP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableSPMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TableSP);
        if (TableSP.getColumnModel().getColumnCount() > 0) {
            TableSP.getColumnModel().getColumn(0).setMaxWidth(40);
            TableSP.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Bảng sản phẩm");

        TableGH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn giá", "Thành tiền"
            }
        ));
        TableGH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableGHMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TableGH);
        if (TableGH.getColumnModel().getColumnCount() > 0) {
            TableGH.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel12.setText("Giỏ hàng");

        TableHoadon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã hóa đơn", "Ngày đặt", "Thành tiền"
            }
        ));
        TableHoadon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableHoadonMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TableHoadon);
        if (TableHoadon.getColumnModel().getColumnCount() > 0) {
            TableHoadon.getColumnModel().getColumn(0).setMaxWidth(50);
            TableHoadon.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel16.setText("Bảng đơn hàng đang chờ");

        btnAddHd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAddHd.setText("Refresh");
        btnAddHd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHdActionPerformed(evt);
            }
        });

        btnAddSp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAddSp.setText("Thêm vào giỏ hàng");
        btnAddSp.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddSp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSpActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSave.setText("Tạo đơn hàng mới");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("THOÁT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnDeleteSPCT.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnDeleteSPCT.setText("Xóa sản phẩm giỏ hàng");
        btnDeleteSPCT.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteSPCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSPCTActionPerformed(evt);
            }
        });

        TableKH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Khách", "SĐT", "Địa chỉ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableKH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableKHMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TableKH);

        jButton3.setText("Chấp nhận đơn hàng");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Hủy đơn hàng");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        TableHDSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Hàng hóa", "Số lượng", "Đơn giá /1sp", "Đơn giá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableHDSP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableHDSPMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(TableHDSP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(95, 95, 95)
                        .addComponent(btnAddHd, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(242, 242, 242)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane4)
                                    .addComponent(jScrollPane1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDeleteSPCT))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnAddSp)
                                .addGap(26, 26, 26)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                            .addComponent(jScrollPane5)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(53, 53, 53))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1)
                    .addComponent(btnAddHd))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddSp)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeleteSPCT)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // OK
    private void btnAddSpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSpActionPerformed
        // TODO add your handling code here:
        if (selected_good.getId()==null) {
          JOptionPane.showMessageDialog(this, "Hãy chọn sản phẩm để thêm vào giỏ hàng!", "Lỗi", JOptionPane.WARNING_MESSAGE);
        } else {
          Boolean good_exist = false;
          for (Good good : good_buy_list){
            if (good.getId().equals(selected_good.getId())){
              good_exist = true;
              good.setQuantity(good.getQuantity()+1);
            }
          }
          if (!good_exist){
            Good good = new Good();
            good.setId(selected_good.getId());
            good.setName(selected_good.getName());
            good.setShop_id(selected_good.getShop_id());
            good.setPrice(selected_good.getPrice());
            good.setQuantity(1);
            good_buy_list.add(good);
          }
          showTableSP();
          showTableGH();
        }
    }//GEN-LAST:event_btnAddSpActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {                                        
      // TODO add your handling code here: //create new sell record
      if(selected_customer.getId()==null){
        JOptionPane.showMessageDialog(this, "Chưa chọn khách hàng hoặc giỏ hàng đang trống!", "Lỗi", JOptionPane.WARNING_MESSAGE);
      }
      else{
      SellRecord sellrecord = new SellRecord("",good_buy_list,Global.current_user,selected_customer,"","",0);
      try {
        sellrecord_controller.createNewSellRecord(sellrecord);
      } catch (ExecutionException | InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      reset();

      }
    }// GEN-LAST:event_btnSaveActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Home home = new Home();
        home.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAddHdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHdActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_btnAddHdActionPerformed

    // OK
    private void TableSPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableSPMouseClicked
        // TODO add your handling code here:
        indexSP = TableSP.getSelectedRow();
        selected_good = good_list.get(indexSP);
    }//GEN-LAST:event_TableSPMouseClicked

    private void btnDeleteSPCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSPCTActionPerformed
      // TODO add your handling code here:
      if (selected_buy_good.getId()==null){
        JOptionPane.showMessageDialog(this, "Hãy chọn sản phẩm để xóa!", "Lỗi", JOptionPane.WARNING_MESSAGE);
      }
      else{
        Integer ind = -1;
        for (Good good: good_buy_list){
          if (good.getId().equals(selected_buy_good.getId())){
            ind = good_buy_list.indexOf(good);
          }
        }
        good_buy_list.remove(good_buy_list.get((Integer)ind));
        selected_buy_good = new Good();
        showTableGH();
      }
    }//GEN-LAST:event_btnDeleteSPCTActionPerformed

    private void TableHoadonMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_TableHoadonMouseClicked
      // TODO add your handling code here:
      indexHD = TableHoadon.getSelectedRow();
      selected_sellrecord = sellrecord_list.get(indexHD);
      showTableHDSP();
    }// GEN-LAST:event_TableHoadonMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton3ActionPerformed
      // TODO add your handling code here:
      if (selected_sellrecord.getId() == null){
        JOptionPane.showMessageDialog(this, "Hãy chọn một đơn hàng", "Lỗi", JOptionPane.WARNING_MESSAGE);
        return;
      }
      Boolean enough_good = false;
      for (Good good : selected_sellrecord.getGood_list()){
        for (Good good_inv : good_list){
          if (good.getId().equals(good_inv.getId()) && good.getQuantity()<good_inv.getQuantity() ){
            enough_good = true;
          }
        }
      }
      if(enough_good){
        try {
          sellrecord_controller.doneSellRecord(selected_sellrecord.getId());
        } catch (ExecutionException | InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }
        reset();
      }
      else{
        JOptionPane.showMessageDialog(this, "Kho hàng không đủ để giao đơn hàng này", "Lỗi", JOptionPane.WARNING_MESSAGE);
      }
    }// GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      // TODO add your handling code here:
      if (jTextField1.getText().isEmpty() || jTextField2.getText().isEmpty() || txtSDT.getText().isEmpty()){
        JOptionPane.showMessageDialog(this, "Điền đủ thông tin người dùng!", "Lỗi", JOptionPane.WARNING_MESSAGE);
      }
      else {
        Customer customer = new Customer();
        customer.setName(jTextField1.getText());
        customer.setPhone(txtSDT.getText());
        customer.setAddress(jTextField2.getText());
        try {
          customer_controller.createNewCustomer(customer);
        } catch (ExecutionException | InterruptedException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }
        reset();
      }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TableKHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableKHMouseClicked
        // TODO add your handling code here:
        indexKH = TableKH.getSelectedRow();
        selected_customer = customer_list.get(indexKH);
    }//GEN-LAST:event_TableKHMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      // TODO add your handling code here:
      if (selected_sellrecord.getId() == null){
        JOptionPane.showMessageDialog(this, "Hãy chọn một đơn hàng", "Lỗi", JOptionPane.WARNING_MESSAGE);
        return;
      }
      try {
        sellrecord_controller.rejectSellRecord(selected_sellrecord.getId());
      } catch (ExecutionException | InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      reset();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void TableGHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableGHMouseClicked
      // TODO add your handling code here:
      indexGH = TableGH.getSelectedRow();
      selected_buy_good = good_buy_list.get(indexGH);
    }//GEN-LAST:event_TableGHMouseClicked

    private void TableHDSPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableHDSPMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableHDSPMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QLHoaDon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QLHoaDon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QLHoaDon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QLHoaDon.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QLHoaDon().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableGH;
    private javax.swing.JTable TableHDSP;
    private javax.swing.JTable TableHoadon;
    private javax.swing.JTable TableKH;
    private javax.swing.JTable TableSP;
    private javax.swing.JButton btnAddHd;
    private javax.swing.JButton btnAddSp;
    private javax.swing.JButton btnDeleteSPCT;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField txtSDT;
    // End of variables declaration//GEN-END:variables

    private void showTableHD() {
      modelHD.setRowCount(0);
      try {
        sellrecord_list = sellrecord_controller.getAllPendingSellRecords();
      } catch (ExecutionException | InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      for (SellRecord sellrecord : sellrecord_list) {
        List<Good> good_list = sellrecord.getGood_list();
        String good_string = "";
        for (Good good : good_list) {
          good_string += good.getName().toString() + ":" + good.getQuantity() + "\n";
        }
        modelHD.addRow(new Object[] {
            TableKH.getRowCount() + 1,
            sellrecord.getId(),
            sellrecord.getTime(),
            sellrecord.getPrice()
        });
      }
    }

    // OK
    private void showTableSP() {
      modelSP.setRowCount(0);
      for (Good good : good_list) {
        modelSP.addRow(new Object[] {
            TableSP.getRowCount() + 1,
            good.getShop_id(),
            good.getName(),
            good.getQuantity(),
            good.getPrice()
        });
      }
    }

    // Ok
    private void showTableGH() {
      modelGH.setRowCount(0);
      for (Good good : good_buy_list) {
        modelGH.addRow(new Object[] {
            TableGH.getRowCount() + 1,
            good.getShop_id(),
            good.getName(),
            good.getQuantity(),
            good.getPrice(),
            good.getQuantity()*good.getPrice()
        });
      }
    }

    private void showTableKH() {
      modelKH.setRowCount(0);
      for (Customer customer : customer_list) {
        modelKH.addRow(new Object[] {
            TableKH.getRowCount() + 1,
            customer.getName(),
            customer.getPhone(),
            customer.getAddress()
        });
      }
    }

    private void showTableHDSP() {
      modelHDSP.setRowCount(0);
      List<Good> good_list = selected_sellrecord.getGood_list();
      for (Good good : good_list) {
        modelHDSP.addRow(new Object[] {
            TableHDSP.getRowCount() + 1,
            good.getName(),
            good.getQuantity(),
            good.getPrice(),
            good.getPrice() * good.getQuantity()
        });
      }
    }

    private void reset() {
      jTextField1.setText("");
      jTextField2.setText("");
      txtSDT.setText("");
      try {
        customer_list = customer_controller.getAllCustomers();
      } catch (ExecutionException | InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      try {
        good_list = good_controller.getAllGoods();
      } catch (ExecutionException | InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }
      good_buy_list = new ArrayList<Good>();
      try {
        sellrecord_list = sellrecord_controller.getAllPendingSellRecords();
      } catch (ExecutionException | InterruptedException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
      }

      selected_customer = new Customer();
      selected_good = new Good();
      selected_buy_good = new Good();
      selected_sellrecord = new SellRecord();

      showTableGH();
      showTableHD();
      showTableKH();
      showTableSP();
      showTableHDSP();
    }
  }
